(defun !suffix-for-def-class (symbol suffix)
  (intern (concatenate 'string (string symbol) "-" (string suffix))))

(defun !create-getter-for-class (class-name slot-name)
	`(defun ,(!suffix-for-def-class class-name slot-name) (object)
		(let ((value (gethash ',slot-name object)))
			;(if ((eq ,class-name (gethash 'META-CLASS object))) value (error "This is not a object of class ~S" ',class-name))
			value)))

(defmacro def-class (class &rest slots)
	  (let* ((class-definition (if (listp class) class (list class nil)))
	  	(name (first class-definition))
	  	(super-classes (cdr class-definition)))
	   	`(progn (defvar ,name ',name)
	   			(defun ,(!suffix-for-def-class 'make name) (&key ,@slots)
			       		  (let ((*class* (make-hash-table)))
			       		  	(setf (gethash 'META-CLASS *class*) ,name)
			       		  	,@(mapcar #'(lambda (x) `(setf (gethash ',x *class*) ,x)) slots)
			       		  *class*))
	   			,@(mapcar #'(lambda (x) (!create-getter-for-class name x)) slots)
				)
		) )

(macroexpand '(def-class (student person) name hello))

(def-class (student person) name hello)
(def-class person hello)
(defvar s)
(defvar p)
(setq s (make-student :name "luis"))
(setq p (make-person :hello "luis"))
(student-name s)
(student-name p)